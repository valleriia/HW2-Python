{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "# @TODO: Import libraries\n",
    "import csv\n",
    "from pathlib import Path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# @TODO: Set file paths for menu_data.csv and sales_data.csv\n",
    "menu_filepath = Path('menu_data.csv')\n",
    "sales_filepath = Path('sales_data.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "# @TODO: Initialize list objects to hold our menu and sales data\n",
    "menu = []\n",
    "sales = []\n",
    "report = {}\n",
    "row_count = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "# @TODO: Read in the menu data into the menu list\n",
    "with open(menu_filepath, 'r') as csvfile:\n",
    "    # print(csvfile)\n",
    "    \n",
    "    csv_reader = csv.reader(csvfile, delimiter = ',')\n",
    "    header = next(csv_reader)\n",
    "    \n",
    "#     print(f\"{header} <- this is the header\" )\n",
    "    \n",
    "    for row in csv_reader:\n",
    "        menu.append(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "# @TODO: Read in the sales data into the sales list\n",
    "with open(sales_filepath, 'r') as csvfile:\n",
    "    # print(csvfile)\n",
    "    \n",
    "    csv_reader = csv.reader(csvfile, delimiter = ',')\n",
    "    header = next(csv_reader)\n",
    "    \n",
    "#     print(f\"{header} <- this is the header\" )\n",
    "    \n",
    "    for row in csv_reader:\n",
    "        sales.append(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "# @TODO: Initialize dict object to hold our key-value pairs of items and metrics\n",
    "for sales_row in sales:\n",
    "    if sales_row[4] not in report:\n",
    "        report[sales_row[4]] = {'01-count': 0, '02-revenue': 0, '03-cogs': 0, '04-profit': 0}\n",
    "        report[sales_row[4]]['01-count'] += int(sales_row[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize a row counter variable\n",
    "for sales_row in sales:\n",
    "    report[sales_row[4]]['01-count'] += int(sales_row[3])\n",
    "for menu_row in menu:\n",
    "    menu_item = menu_row[0]\n",
    "    if menu_item in report:\n",
    "        menu_price = menu_row[3]\n",
    "        menu_cost = menu_row[4]\n",
    "        report[menu_item]['02-revenue'] += (int(menu_price) * int(report[menu_item]['01-count']))\n",
    "        report[menu_item]['03-cogs'] += (int(menu_cost) * int(report[menu_item]['01-count']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate profit using revenue and cogs\n",
    "for item, valuedict in report.items():\n",
    "    report[item]['04-profit'] = report[item]['02-revenue'] - report[item]['03-cogs']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'spicy miso ramen': {'01-count': 18477,\n",
       "  '02-revenue': 332592,\n",
       "  '03-cogs': 138580,\n",
       "  '04-profit': 64673},\n",
       " 'tori paitan ramen': {'01-count': 18315,\n",
       "  '02-revenue': 357162,\n",
       "  '03-cogs': 164844,\n",
       "  '04-profit': 64113},\n",
       " 'truffle butter ramen': {'01-count': 17965,\n",
       "  '02-revenue': 377272,\n",
       "  '03-cogs': 188636,\n",
       "  '04-profit': 62881},\n",
       " 'tonkotsu ramen': {'01-count': 18577,\n",
       "  '02-revenue': 362258,\n",
       "  '03-cogs': 167196,\n",
       "  '04-profit': 65023},\n",
       " 'vegetarian spicy miso': {'01-count': 18433,\n",
       "  '02-revenue': 331800,\n",
       "  '03-cogs': 138250,\n",
       "  '04-profit': 64519},\n",
       " 'shio ramen': {'01-count': 18361,\n",
       "  '02-revenue': 302962,\n",
       "  '03-cogs': 137710,\n",
       "  '04-profit': 55086},\n",
       " 'miso crab ramen': {'01-count': 17784,\n",
       "  '02-revenue': 320136,\n",
       "  '03-cogs': 160068,\n",
       "  '04-profit': 53364},\n",
       " 'nagomi shoyu': {'01-count': 18265,\n",
       "  '02-revenue': 301378,\n",
       "  '03-cogs': 136990,\n",
       "  '04-profit': 54798},\n",
       " 'soft-shell miso crab ramen': {'01-count': 18261,\n",
       "  '02-revenue': 383488,\n",
       "  '03-cogs': 191744,\n",
       "  '04-profit': 63917},\n",
       " 'burnt garlic tonkotsu ramen': {'01-count': 18141,\n",
       "  '02-revenue': 380968,\n",
       "  '03-cogs': 163272,\n",
       "  '04-profit': 72568},\n",
       " 'vegetarian curry + king trumpet mushroom ramen': {'01-count': 17649,\n",
       "  '02-revenue': 344162,\n",
       "  '03-cogs': 185318,\n",
       "  '04-profit': 52950}}"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "# output file with metrics\n",
    "output_path = Path('PyRamen.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(output_path, 'w') as file:\n",
    "    file.write(\"This is the financial report for PyRamen.\\n\")\n",
    "    for key in report:\n",
    "        file.write(f\"{key} {report[key]} \\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
